// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    uuid, firstname, lastname, email, hashed_password
) VALUES (
             $1, $2, $3, $4, $5
         )
RETURNING id, uuid, firstname, lastname, email, hashed_password, verified, created
`

type CreateUserParams struct {
	Uuid           string `json:"uuid"`
	Firstname      string `json:"firstname"`
	Lastname       string `json:"lastname"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Uuid,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.HashedPassword,
		&i.Verified,
		&i.Created,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uuid, firstname, lastname, email, hashed_password, verified, created FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.HashedPassword,
		&i.Verified,
		&i.Created,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT id, uuid, firstname, lastname, email, hashed_password, verified, created FROM users
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetUserByUUID(ctx context.Context, uuid string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUUIDStmt, getUserByUUID, uuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.HashedPassword,
		&i.Verified,
		&i.Created,
	)
	return i, err
}

const setUserVerified = `-- name: SetUserVerified :exec
UPDATE users
SET verified=true
WHERE id = $1
`

func (q *Queries) SetUserVerified(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.setUserVerifiedStmt, setUserVerified, id)
	return err
}

const userEmailExists = `-- name: UserEmailExists :one
SELECT 1 FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) UserEmailExists(ctx context.Context, email string) (interface{}, error) {
	row := q.queryRow(ctx, q.userEmailExistsStmt, userEmailExists, email)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}
